// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef KETOMOJOSDK_SWIFT_H
#define KETOMOJOSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KetoMojoSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol KMBloodMeterDeviceDelegate;
enum KMBloodMeterUnit : NSInteger;
@protocol KMBloodMeterRecord;

/// Defines public interface for blood meter devices.
SWIFT_PROTOCOL_NAMED("BloodMeterDevice")
@protocol KMBloodMeterDevice
/// Blood meter delegate set to receive commands responses.
@property (nonatomic, strong) id <KMBloodMeterDeviceDelegate> _Nullable delegate;
/// Contains blood meter unit.
@property (nonatomic, readonly) enum KMBloodMeterUnit unit;
/// Function called to read device serial number.
- (void)readSerialNumber;
/// Function called to read device unit.
- (void)readDeviceUnit;
/// Function called to read device records.
/// \param includeQualityControl Indicates whether quality control records should be skipped or not.
///
- (void)readRecordsWithIncludeQualityControl:(BOOL)includeQualityControl;
/// Function called to read device records from last reading date.
/// \param includeQualityControl Indicates whether quality control records should be skipped or not.
///
- (void)readNewRecordsWithIncludeQualityControl:(BOOL)includeQualityControl;
/// Function called to set device time.
/// \param date Date which will be set.
///
///
/// throws:
/// <code>DeviceError.wrongDeviceTime</code>
- (BOOL)setTimeWithDate:(NSDate * _Nonnull)date error:(NSError * _Nullable * _Nullable)error;
/// Function called to read device time.
- (void)readTime;
/// Function called to delete a specific record. Supported only on VivaChek devices.
/// Please note that method takes a bit longer than expected as
/// it wipes all memory and writes it all once again without that single record.
/// \param records An array of records that should be deleted.
///
/// \param currentRecords Optional, if passed, the process starts with downloading only new records from the device.
///
- (BOOL)deleteRecords:(NSArray<id <KMBloodMeterRecord>> * _Nonnull)records currentRecords:(NSArray<id <KMBloodMeterRecord>> * _Nullable)currentRecords error:(NSError * _Nullable * _Nullable)error;
/// Function called to delete all records from the device.
- (void)deleteRecords;
/// Writes a given record to a device. Supports only VivaChek firmware 14.
/// \param record Record that should be written.
///
- (BOOL)writeRecord:(id <KMBloodMeterRecord> _Nonnull)record error:(NSError * _Nullable * _Nullable)error;
/// Function called to reset device to factory settings.
- (void)factoryReset;
/// Function called to shutdown device.
- (void)shutdown;
/// Function called to read a device software version.
- (void)readSoftwareVersion;
/// Function called to read count of all samples within the device
- (void)readRecordsCount;
/// Function called to read count of expected new samples within the device
- (void)readExpectedRecordsCount;
@end

enum KMDeviceError : NSInteger;

/// Defines functions used by blood meter device to inform about commands responses.
SWIFT_PROTOCOL_NAMED("BloodMeterDeviceDelegate")
@protocol KMBloodMeterDeviceDelegate
@optional
/// Function called when device has sent its serial number.
/// \param device Device which has sent serial number.
///
/// \param serialNumber Device serial number.
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device didReadSerialNumber:(NSString * _Nonnull)serialNumber;
/// Function called when device has sent its unit.
/// \param device Device which has sent unit.
///
/// \param unit Blood meter unit.
///
/// \param description Unit represented as String value.
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device didReadUnit:(enum KMBloodMeterUnit)unit description:(NSString * _Nonnull)description;
/// Function called when device has sent its history readings.
/// Device is sending each reading separately - glucose reading won’t be combined with hematocrit or hemoglobine.
/// An output would be e.g. [Glucose reading, Hematocrit reading, Ketone reading].
/// \param device Device which has sent history readings.
///
/// \param historyData Device history readings.
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device didReadHistoryData:(NSArray<id <KMBloodMeterRecord>> * _Nonnull)historyData;
/// Function called when device has sent its date.
/// \param device Device which was processing command.
///
/// \param date Device date.
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device didReadDate:(NSDate * _Nonnull)date;
/// Function called to return progress of command being processed by the device.
/// \param device Device which is processing command.
///
/// \param progress Processing progress. Value starts from <code>0.0</code> and ends at <code>1.0</code>.
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device progress:(double)progress;
/// Function called when device has processed command.
/// seealso:
/// <code>BloodMeterDeviceDelegate.bloodMeter(_:didReceive:)</code>
/// \param device Device which was processing command.
///
/// \param didProcessedCommand Indicates wheter command was successfully processed. If not then device would sent error.
///
/// \param error Error from device.
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device didProcessedCommand:(BOOL)didProcessedCommand with:(enum KMDeviceError)error;
/// Function called when blood meter was disconnected.
/// \param bloodMeter Device which was disconnected.
///
- (void)disconnectedWithBloodMeter:(id <KMBloodMeterDevice> _Nonnull)bloodMeter;
/// Function called after blood meter was forgotten from the device.
/// \param bloodMeter Device which was disconnected.
///
- (void)didForget:(id <KMBloodMeterDevice> _Nonnull)device;
/// Function called when blood meter version number was read.
/// \param bloodMeter Device which the version was read for.
///
/// \param version String representation of version.
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device didRead:(NSString * _Nonnull)version;
/// Function called when blood meter storage count was read.
/// \param bloodMeter Device which the version was read for.
///
/// \param count Count of read samples
///
- (void)bloodMeter:(id <KMBloodMeterDevice> _Nonnull)device didReadStorageCount:(NSInteger)count;
@end

enum KMBloodMeterSample : NSInteger;
enum PrandialTag : NSInteger;
@class KMBloodMeterRecordValue;

/// Defines public interface for records used by blood meter devices.
SWIFT_PROTOCOL_NAMED("BloodMeterRecord")
@protocol KMBloodMeterRecord
/// Contains test sample type.
@property (nonatomic, readonly) enum KMBloodMeterSample sample;
/// Contains test date.
@property (nonatomic, copy) NSDate * _Nonnull date;
/// A date when record was taken with some alterations - added seconds.
/// A fallback for sorting records if they have record date in the same minute.
/// Please note, records synchronized from the device are with minute granularity.
@property (nonatomic, copy) NSDate * _Nonnull adjustedDate;
/// Contains prandial value.
@property (nonatomic, readonly) enum PrandialTag prandialTag;
/// Contains test value.
@property (nonatomic, readonly, strong) KMBloodMeterRecordValue * _Nonnull value;
@end


/// Interface used for record value conversion.
SWIFT_CLASS_NAMED("BloodMeterRecordValue")
@interface KMBloodMeterRecordValue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum which contains possible blood meter sample types.
typedef SWIFT_ENUM_NAMED(NSInteger, KMBloodMeterSample, "BloodMeterSample", closed) {
/// Type used for blood glucose test.
  KMBloodMeterSampleGlucose = 0,
/// Type used for blood glucose GKI test.
  KMBloodMeterSampleGlucoseGKI = 1,
/// Type used for blood glucose quality control test.
  KMBloodMeterSampleGlucoseQualityControl = 2,
/// Type used for blood glucose GKI quality control test.
  KMBloodMeterSampleGlucoseGKIQualityControl = 3,
/// Type used for blood ketone test.
  KMBloodMeterSampleKetone = 4,
/// Type used for blood ketone GKI test.
  KMBloodMeterSampleKetoneGKI = 5,
/// Type used for blood ketone quality control test.
  KMBloodMeterSampleKetoneQualityControl = 6,
/// Type used for blood ketone GKI quality control test.
  KMBloodMeterSampleKetoneGKIQualityControl = 7,
/// Type used for GKI test.
  KMBloodMeterSampleGKI = 8,
/// Type used for error test.
  KMBloodMeterSampleError = 9,
/// Type used for hematocrit test.
  KMBloodMeterSampleHematocrit = 10,
/// Type used for hemoglobine test.
  KMBloodMeterSampleHemoglobine = 11,
};

/// Available blood meters units.
typedef SWIFT_ENUM_NAMED(NSInteger, KMBloodMeterUnit, "BloodMeterUnit", closed) {
/// Used for records supporting mg/dL.
  KMBloodMeterUnitMgdl = 0,
/// Used for records supporting mmol/L.
  KMBloodMeterUnitMmol = 1,
/// Used for records supporting g/dL.
  KMBloodMeterUnitGdl = 2,
/// Used for records supporting %.
  KMBloodMeterUnitPercent = 3,
/// Used when unit is not determined.
  KMBloodMeterUnitNone = 4,
};



enum KMSeparator : NSInteger;

/// Class used to build CSV string from given data.
SWIFT_CLASS_NAMED("CSVBuilder")
@interface KMCSVBuilder : NSObject
/// Type of separator to be used.
@property (nonatomic) enum KMSeparator separator;
/// Builds CSV string from given blood meter records.
/// \param records Records that should be parsed to CSV.
///
- (NSString * _Nonnull)buildFrom:(NSArray<id <KMBloodMeterRecord>> * _Nonnull)records SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Available separators.
typedef SWIFT_ENUM_NAMED(NSInteger, KMSeparator, "Separator", closed) {
/// Represents comma separator.
  KMSeparatorComma = 0,
/// Represents semicolon separator.
  KMSeparatorSemicolon = 1,
/// Represents tab separator.
  KMSeparatorTab = 2,
};

/// List of possible errors during connection.
typedef SWIFT_ENUM_NAMED(NSInteger, KMConnectError, "ConnectError", closed) {
/// Error sent when bluetooth service is unavailable. Probably powered off or not authorized.
  KMConnectErrorBluetoothUnavailable = 0,
/// Error sent when device doesn’t support the Bluetooth low energy central.
  KMConnectErrorIncompatibleDevice = 1,
/// Error sent when devices connection limit has been exceeded.
  KMConnectErrorDeviceConnectionLimitExceed = 2,
/// Error sent when trying to connect with already connected device.
  KMConnectErrorDeviceAlreadyConnected = 3,
/// Error sent when trying to connect with device which is not available.
  KMConnectErrorDeviceIsNotAvailable = 4,
/// Error sent when trying to connect and the app is not permitted to use Bluetooth module.
  KMConnectErrorBluetoothUnauthorized = 5,
};
static NSString * _Nonnull const KMConnectErrorDomain = @"KetoMojoSDK.ConnectError";

@protocol KMDeviceConnectable;

/// Defines public interface used to interact with device.
SWIFT_CLASS_NAMED("Device")
@interface KMDevice : NSObject
/// Returns device name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Returns device identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceIdentifier;
/// Contains device serial number.
@property (nonatomic, copy) NSString * _Nullable serialNumber;
/// Function called to inform delegate about connection.
/// \param delegate Delegate which conforms to <code>DeviceConnectable</code> protocol.
///
- (void)callWithDelegate:(id <KMDeviceConnectable> _Nullable)delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines functions used to inform about new connection.
SWIFT_PROTOCOL_NAMED("DeviceConnectable")
@protocol KMDeviceConnectable
@optional
/// Function called when connected with blood meter device
/// seealso:
/// <code>BloodMeterDevice</code>
/// \param bloodMeter Device with which user has connected.
///
- (void)connectedWith:(id <KMBloodMeterDevice> _Nonnull)bloodMeter;
@end

/// List of possible errors received from device.
typedef SWIFT_ENUM_NAMED(NSInteger, KMDeviceError, "DeviceError", closed) {
/// Indicates that there was no error.
  KMDeviceErrorNone = 0,
/// Error sent when device time was not set.
  KMDeviceErrorCannotSetTime = 1,
/// Error sent when user tries to set wrong device time.
/// The date year cannot be older than 2000.
  KMDeviceErrorWrongDeviceTime = 2,
/// Error sent when device was not supporting factory reset.
  KMDeviceErrorCannotResetDevice = 3,
/// Error sent when device was not connected while trying to sent command.
  KMDeviceErrorDeviceNotConnected = 4,
/// Error sent when device is not supporting given function.
  KMDeviceErrorNotSupported = 5,
};
static NSString * _Nonnull const KMDeviceErrorDomain = @"KetoMojoSDK.DeviceError";

@protocol KMDeviceManagerDelegate;
@class KMDiscoveredDevice;

/// Defines functions used to discover, connect and disconnect devices.
SWIFT_PROTOCOL_NAMED("DeviceSynchronizable")
@protocol KMDeviceSynchronizable
/// seealso:
/// <code>DeviceManagerDelegate</code>
@property (nonatomic, strong) id <KMDeviceManagerDelegate> _Nullable delegate;
/// Function called to start discovering bluetooth devices.
- (void)startScan;
/// Function called to stop discovering bluetooth devices.
- (void)stopScan;
/// Function called to connect with device by given identifier.
/// seealso:
/// <code>CBUUID</code>
/// \param identifier Device identifier. Should be represented as UUID.
///
///
/// throws:
/// <code>ConnectError.deviceAlreadyConnected</code>
- (BOOL)connectWithIdentifier:(NSString * _Nonnull)identifier error:(NSError * _Nullable * _Nullable)error;
/// Function called to connect with discovered device.
/// seealso:
/// <code>DeviceManagerDelegate.meterManager(_:didDiscover:)</code>
/// \param device Device that has been discovered.
///
///
/// throws:
/// <code>ConnectError.deviceIsNotAvailable</code>
- (BOOL)connectWith:(KMDiscoveredDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// Function called to disconnect from the device.
/// \param device Device which should be disconnected
///
///
/// throws:
/// <code>DisconnectError.deviceNotConnected</code>
- (BOOL)disconnectWithDevice:(KMDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// Function called to forget and remove from memory the devices, that have been synced and saved .
- (void)forgetDevices;
@end


/// Public interface granting methods to connect and disconnect devices.
SWIFT_CLASS_NAMED("DeviceManager")
@interface KMDeviceManager : NSObject <KMDeviceSynchronizable>
/// A singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KMDeviceManager * _Nonnull shared;)
+ (KMDeviceManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Delegate of this class used to inform about meters detection.
@property (nonatomic, weak) id <KMDeviceManagerDelegate> _Nullable delegate;
/// Returns connected devices.
@property (nonatomic, readonly, copy) NSArray<KMDevice *> * _Nonnull connectedDevices;
/// seealso:
/// <code>DeviceSynchronizable.startScan</code>
- (void)startScan;
/// seealso:
/// <code>DeviceSynchronizable.forgetDevices</code>
- (void)forgetDevices;
/// seealso:
/// <code>DeviceSynchronizable.stopScan</code>
- (void)stopScan;
/// seealso:
/// <code>DeviceSynchronizable.connect(identifier:)</code>
- (BOOL)connectWithIdentifier:(NSString * _Nonnull)identifier error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>DeviceSynchronizable.connect(with:)</code>
- (BOOL)connectWith:(KMDiscoveredDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>DeviceSynchronizable.disconnect(identifier:)</code>
- (BOOL)disconnectWithDevice:(KMDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines functions used to inform about new devices and connections.
SWIFT_PROTOCOL_NAMED("DeviceManagerDelegate")
@protocol KMDeviceManagerDelegate <KMDeviceConnectable>
/// Function called to inform delegate that new device has been discovered.
/// seealso:
/// <code>DeviceManager</code>
/// seealso:
/// <code>DiscoveredDevice</code>
/// \param manager Manager which called this function.
///
/// \param device Device which has been discovered.
///
- (void)deviceManager:(KMDeviceManager * _Nonnull)manager didDiscover:(KMDiscoveredDevice * _Nonnull)device;
/// Function called to inform delegate that device has disappeared.
/// seealso:
/// <code>DeviceManager</code>
/// seealso:
/// <code>DiscoveredDevice</code>
/// \param manager Manager which called this function.
///
/// \param device Device which has disappeared.
///
- (void)deviceManager:(KMDeviceManager * _Nonnull)manager didDisappear:(KMDiscoveredDevice * _Nonnull)device;
/// Function called when ConnectError has occured during connection process.
/// seealso:
/// <code>ConnectError</code>
/// \param manager Manager which called this function.
///
/// \param error Error which has occured.
///
- (void)deviceManager:(KMDeviceManager * _Nonnull)manager connectErrorOccured:(enum KMConnectError)error;
@end


/// List of possible error during disconnection process.
typedef SWIFT_ENUM_NAMED(NSInteger, KMDisconnectError, "DisconnectError", closed) {
/// Error sent when trying to disconnect from unconnected device.
  KMDisconnectErrorDeviceNotConnected = 0,
};
static NSString * _Nonnull const KMDisconnectErrorDomain = @"KetoMojoSDK.DisconnectError";

@class NSNumber;
@class CBPeripheral;

/// Defines public interface for discovered device.
SWIFT_CLASS_NAMED("DiscoveredDevice")
@interface KMDiscoveredDevice : KMDevice
/// Discovered device name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Discovered device identifier.
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceIdentifier;
/// Discovered device signal strength in decibels.
@property (nonatomic, readonly, strong) NSNumber * _Nonnull signalStrength;
/// Last timestamp when device has been discovered. Used to detect if device has disappeared.
@property (nonatomic, readonly) NSTimeInterval lastDiscoverTimestamp;
/// Function called to update device last discovered timestamp.
/// \param timestamp New timestamp that should be set. Default is current date.
///
- (void)updateDeviceTimestampTo:(NSTimeInterval)timestamp;
/// Function called to check if discovered device contains given native peripheral.
/// \param peripheral Native peripheral class.
///
- (BOOL)containsWithPeripheral:(CBPeripheral * _Nonnull)peripheral SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines an enum describing if the measure was taken before or after prandial.
typedef SWIFT_ENUM_NAMED(NSInteger, PrandialTag, "PrandialTag", closed) {
  PrandialTagPreprandial = 0,
  PrandialTagPostprandial = 1,
  PrandialTagGeneral = 2,
};


/// Class which represents Taidoc blood glucose & ketone meter.
SWIFT_CLASS_NAMED("Taidoc")
@interface KMTaidoc : KMDevice <KMBloodMeterDevice>
/// seealso:
/// <code>BloodMeterDevice.delegate</code>
@property (nonatomic, weak) id <KMBloodMeterDeviceDelegate> _Nullable delegate;
/// seealso:
/// <code>BloodMeterDevice.unit</code>
@property (nonatomic) enum KMBloodMeterUnit unit;
/// seealso:
/// <code>BloodMeterDevice.readSerialNumber</code>
- (void)readSerialNumber;
/// seealso:
/// <code>BloodMeterDevice.readDeviceUnit</code>
- (void)readDeviceUnit;
/// seealso:
/// <code>BloodMeterDevice.readRecords(includeQualityControl:)</code>
- (void)readRecordsWithIncludeQualityControl:(BOOL)includeQualityControl;
/// seealso:
/// <code>BloodMeterDevice.readNewRecords(includeQualityControl:)</code>
- (void)readNewRecordsWithIncludeQualityControl:(BOOL)includeQualityControl;
/// seealso:
/// <code>BloodMeterDevice.setTime(date:)</code>
- (BOOL)setTimeWithDate:(NSDate * _Nonnull)date error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>BloodMeterDevice.readTime</code>
- (void)readTime;
/// seealso:
/// <code>BloodMeterDevice.deleteRecord</code>
- (BOOL)deleteRecords:(NSArray<id <KMBloodMeterRecord>> * _Nonnull)records currentRecords:(NSArray<id <KMBloodMeterRecord>> * _Nullable)currentRecords error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>BloodMeterDevice.deleteRecords</code>
- (void)deleteRecords;
/// seealso:
/// <code>BloodMeterDevice.writeRecord</code>
- (BOOL)writeRecord:(id <KMBloodMeterRecord> _Nonnull)record error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>BloodMeterDevice.factoryReset</code>
- (void)factoryReset;
/// seealso:
/// <code>BloodMeterDevice.shutdown</code>
- (void)shutdown;
/// seealso:
/// <code>BloodMeterDevice.readSoftwareVersion</code>
- (void)readSoftwareVersion;
/// seealso:
/// <code>BloodMeterDevice.readRecordsCount</code>
- (void)readRecordsCount;
/// seealso:
/// <code>BloodMeterDevice.readExpectedRecordsCount</code>
- (void)readExpectedRecordsCount;
/// seealso:
/// <code>Device.call(delegate:)</code>
- (void)callWithDelegate:(id <KMDeviceConnectable> _Nullable)delegate;
@end



/// Represents Taidoc history test.
SWIFT_CLASS_NAMED("TaidocHistoryData")
@interface KMTaidockHistoryData : NSObject <KMBloodMeterRecord>
/// seealso:
/// <code>BloodMeterRecord.sample</code>
@property (nonatomic, readonly) enum KMBloodMeterSample sample;
/// seealso:
/// <code>BloodMeterRecord.date</code>
@property (nonatomic, copy) NSDate * _Nonnull date;
/// seealso:
/// <code>BloodMeterRecord.adjustedDate</code>
@property (nonatomic, copy) NSDate * _Nonnull adjustedDate;
/// seealso:
/// <code>BloodMeterRecord.value</code>
@property (nonatomic, readonly, strong) KMBloodMeterRecordValue * _Nonnull value;
/// seealso:
/// <code>BloodMeterRecord.prandialTag</code>
@property (nonatomic) enum PrandialTag prandialTag;
/// Initializes history data for Taidoc from given sample, date and value.
/// Used for hemoglobine calculations.
/// \param sample Record sample.
///
/// \param date Record date.
///
/// \param value Record value.
///
- (nonnull instancetype)initWithSample:(enum KMBloodMeterSample)sample date:(NSDate * _Nonnull)date value:(KMBloodMeterRecordValue * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class which represents VivaChek blood glucose & ketone meter.
SWIFT_CLASS_NAMED("VivaChek")
@interface KMVivaChek : KMDevice <KMBloodMeterDevice>
/// seealso:
/// <code>BloodMeterDevice.delegate</code>
@property (nonatomic, weak) id <KMBloodMeterDeviceDelegate> _Nullable delegate;
/// seealso:
/// <code>BloodMeterDevice.unit</code>
@property (nonatomic) enum KMBloodMeterUnit unit;
/// seealso:
/// <code>VivaChekProcessingLayerDataSource.peripheralConnected</code>
@property (nonatomic, readonly) BOOL peripheralConnected;
/// seealso:
/// <code>BloodMeterDevice.readSerialNumber</code>
- (void)readSerialNumber;
/// seealso:
/// <code>BloodMeterDevice.readSoftwareVersion</code>
- (void)readSoftwareVersion;
/// seealso:
/// <code>BloodMeterDevice.readDeviceUnit</code>
- (void)readDeviceUnit;
/// seealso:
/// <code>BloodMeterDevice.readRecords(includeQualityControl:)</code>
- (void)readRecordsWithIncludeQualityControl:(BOOL)includeQualityControl;
/// seealso:
/// <code>BloodMeterDevice.readNewRecords(includeQualityControl:)</code>
- (void)readNewRecordsWithIncludeQualityControl:(BOOL)includeQualityControl;
- (void)readRecordsCount;
- (void)readExpectedRecordsCount;
/// seealso:
/// <code>BloodMeterDevice.setTime(date:)</code>
- (BOOL)setTimeWithDate:(NSDate * _Nonnull)date error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>BloodMeterDevice.readTime</code>
- (void)readTime;
/// seealso:
/// <code>BloodMeterDevice.deleteRecords</code>
- (BOOL)deleteRecords:(NSArray<id <KMBloodMeterRecord>> * _Nonnull)records currentRecords:(NSArray<id <KMBloodMeterRecord>> * _Nullable)currentRecords error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>BloodMeterDevice.deleteRecords</code>
- (void)deleteRecords;
/// seealso:
/// <code>BloodMeterDevice.writeRecord</code>
- (BOOL)writeRecord:(id <KMBloodMeterRecord> _Nonnull)record error:(NSError * _Nullable * _Nullable)error;
/// seealso:
/// <code>BloodMeterDevice.factoryReset</code>
- (void)factoryReset;
/// seealso:
/// <code>BloodMeterDevice.shutdown</code>
- (void)shutdown;
/// seealso:
/// <code>Device.call(delegate:)</code>
- (void)callWithDelegate:(id <KMDeviceConnectable> _Nullable)delegate;
@end


@interface KMVivaChek (SWIFT_EXTENSION(KetoMojoSDK))
/// seealso:
/// <code>VivaChekProcessingLayerDelegate.disconnected</code>
- (void)disconnected;
@end


/// Represents GKI history data reading.
SWIFT_CLASS_NAMED("VivaChekGKIHistoryData")
@interface KMVivaChekGKIHistoryData : NSObject <KMBloodMeterRecord>
/// seealso:
/// <code>BloodMeterRecord.sample</code>
@property (nonatomic, readonly) enum KMBloodMeterSample sample;
/// seealso:
/// <code>BloodMeterRecord.value</code>
@property (nonatomic, readonly, strong) KMBloodMeterRecordValue * _Nonnull value;
/// seealso:
/// <code>BloodMeterRecord.date</code>
@property (nonatomic, copy) NSDate * _Nonnull date;
/// seealso:
/// <code>BloodMeterRecord.adjustedDate</code>
@property (nonatomic, copy) NSDate * _Nonnull adjustedDate;
/// seealso:
/// <code>BloodMeterRecord.prandialTag</code>
@property (nonatomic) enum PrandialTag prandialTag;
/// Initalizes GKI history test with given date and value.
/// \param date Test date.
///
/// \param adjustedDate A date of ketone record with seconds adjustments.
///
/// \param value GKI value.
///
/// \param prandialTag specifies if the measurement is bbefore or after the meal.
///
- (nonnull instancetype)initWithDate:(NSDate * _Nonnull)date adjustedDate:(NSDate * _Nonnull)adjustedDate value:(double)value prandialTag:(enum PrandialTag)prandialTag OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents VivaChek history test.
SWIFT_CLASS_NAMED("VivaChekHistoryData")
@interface KMVivaChekHistoryData : NSObject <KMBloodMeterRecord>
/// seealso:
/// <code>BloodMeterRecord.sample</code>
@property (nonatomic, readonly) enum KMBloodMeterSample sample;
/// seealso:
/// <code>BloodMeterRecord.date</code>
@property (nonatomic, copy) NSDate * _Nonnull date;
/// A date with adjustments used for sorting.
@property (nonatomic, copy) NSDate * _Nonnull adjustedDate;
/// seealso:
/// <code>BloodMeterRecord.value</code>
@property (nonatomic, readonly, strong) KMBloodMeterRecordValue * _Nonnull value;
/// seealso:
/// <code>BloodMeterRecord.prandial</code>
@property (nonatomic) enum PrandialTag prandialTag;
/// Initializes history test from given record. Used to edit the sample type of existing data.
/// \param data a data to copy properties.
///
/// \param sample a new sample type to be assigned.
///
- (nonnull instancetype)initWithData:(id <KMBloodMeterRecord> _Nonnull)data sample:(enum KMBloodMeterSample)sample OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
